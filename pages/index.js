import Head from "next/head";
import { useState } from "react";
import { GrSend } from "react-icons/gr";

export default function Home() {
  const [quoteLoadingError, setQuoteLoadingError] = useState("");
  const [quote, setQuote] = useState("");
  const [quoteLoading, setQuoteLoading] = useState(false);

  const [generatingImg, setGeneratingImg] = useState(false);
  const [img, setImg] = useState("");
  // const [imgGeneratingError, setImgGeneratingError] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    alert("Clicked");
    const formData = new FormData(e.target);
    const prompt = formData.get("prompt")?.toString().trim();
    generateText(prompt);
    generateImage(prompt);
  };

  const generateText = async (prompt) => {
    if (prompt) {
      try {
        setQuote("");
        setQuoteLoadingError("");
        setQuoteLoading(true);

        const response = await fetch(
          "/api/cringe?prompt=" + encodeURIComponent(prompt)
        );
        const body = await response.json();
        setQuote(body.quote);
      } catch (err) {
        alert(err);
        setQuoteLoadingError(err);
      } finally {
        setQuoteLoading(false);
      }
    }
  };

  const generateImage = async (prompt) => {
    if (prompt) {
      try {
        // setImgGeneratingError("");
        setGeneratingImg(true);
        const response = await fetch(
          "/api/dalle?prompt=" + encodeURIComponent(prompt)
        );
        const body = await response.json();
        // setImg(`data:image/jpeg;base64,${body.image_url}`);
        setImg(body.image_url);
      } catch (err) {
        alert(err);
        // setImgGeneratingError(err);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert("Please provide proper prompt");
    }
  };

  return (
    <div>
      <Head>
        <title>OpenAi</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="bg-slate-900 w-full min-h-screen p-[10px]">
        <div className="bg-gray-800 rounded-[10px] shadow h-[100px] w-full px-[200px] flex items-center">
          <form
            className="w-full mx-auto flex justify-center items-center h-max bg-gray-200 rounded-[5px] overflow-hidden"
            onSubmit={handleSubmit}
          >
            <input
              type="text"
              name="prompt"
              className="text-[16px] py-[5px] px-[6px] bg-transparent flex-1 outline-none active:bg-transparent focus:bg-transparent"
            />
            <button type="submit" className="h-full aspect-square px-[10px]">
              <GrSend />
            </button>
          </form>
        </div>
        <div className="text-white text-[20px] text-center px-[200px] py-[20px]">
          {quoteLoading && <p>Loading quote...</p>}
          {quote && <p>{quote}</p>}
          {quoteLoadingError && (
            <p className="text-red-300">{quoteLoadingError.error}</p>
          )}
        </div>

        <div className="w-[400px] aspect-[6/5] mx-auto bg-gray-500 rounded-[10px] shadow flex items-center justify-center overflow-hidden">
          {generatingImg && <p>Loading image...</p>}
          {img && !generatingImg && (
            <img src={img} alt="image" className="w-full h-full bg-gray-300 " />
          )}

          {!img && !generatingImg && (
            <p className="w-[70%] text-center">
              Insert prompt in the above box
            </p>
          )}
          {/* {imgGeneratingError && (
            <p className="text-red-300">Something went wrong</p>
          )} */}
        </div>
      </section>
    </div>
  );
}
